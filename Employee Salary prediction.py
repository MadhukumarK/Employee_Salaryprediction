# -*- coding: utf-8 -*-
"""Employee.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L3TGLQT2TLXUgaQ3pgDE_ds2DseqcrS6
"""

import pandas as pd

# Load the CSV file
df = pd.read_csv("adult 3.csv")

# Display the first 5 rows
print(df.head())

# Display basic information about the dataset
print("\nShape of dataset:", df.shape)
print("\nColumns:", df.columns.tolist())
print("\nMissing values:\n", df.isnull().sum())

import pandas as pd

# Step 1: Load the data
df = pd.read_csv("adult 3.csv")

# Step 2: Replace '?' with 'Other'
df.replace('?', 'Other', inplace=True)

# Step 3: Drop duplicate rows (if any)
df.drop_duplicates(inplace=True)

# Step 4: Encode categorical features using one-hot encoding
df_encoded = pd.get_dummies(df, drop_first=True)

# Step 5: Output final info
print("Preprocessing completed.")
print("Original shape:", df.shape)
print("Encoded shape:", df_encoded.shape)
print("Preview of encoded data:\n", df_encoded.head())

from sklearn.model_selection import train_test_split

# Step 1: Separate features and target
X = df_encoded.drop('income_>50K', axis=1)
y = df_encoded['income_>50K']

# Step 2: Split the dataset
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Step 3: Show shapes
print("Train-test split done.")
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Dictionary to store models and their accuracies
models = {
    "Logistic Regression": LogisticRegression(max_iter=1000),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric='logloss'),
    "SVM": SVC()
}

results = {}

# Train and test each model
for name, model in models.items():
    print(f"ðŸ”§ Training {name}...")
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    accuracy = accuracy_score(y_test, predictions)
    results[name] = accuracy
    print(f" {name} Accuracy: {accuracy:.4f}\n")

import matplotlib.pyplot as plt
import seaborn as sns

# Plot model accuracy comparison
plt.figure(figsize=(8, 5))
sns.barplot(x=list(results.keys()), y=list(results.values()), palette='viridis')

plt.title("Accuracy Comparison of ML Models")
plt.xlabel("Model")
plt.ylabel("Accuracy Score")
plt.ylim(0.7, 1.0)
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

# Get the best model name and accuracy
best_model_name = max(results, key=results.get)
best_model_accuracy = results[best_model_name]
best_model = models[best_model_name]  # access the trained model object

print(f"Best Model: {best_model_name}")
print(f"Accuracy: {best_model_accuracy:.4f}")